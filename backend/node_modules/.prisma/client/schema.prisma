// CBTC Platform - Excellence Entrepreneuriale & IELTS
// Architecte: Abel Coulibaly - Visionnaire Technique

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMERATIONS - Standards d'Excellence
// ========================================

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
  USER
}

enum ProgramLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// ========================================
// MODÈLES PRINCIPAUX - Architecture CBTC
// ========================================

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?
  role  Role    @default(USER)

  // Profile Information - Excellence Personnalisée
  profilePicture    String?
  bio               String?
  phone             String?
  country           String?
  city              String?
  preferredLanguage String? @default("en")

  // Account Status - Gestion Intelligente
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false)
  lastLoginAt DateTime?

  // Relations - Écosystème Intégré
  programs         Program[]
  ieltsTestResults IELTSTestResult[]
  enrollments      Enrollment[]
  lessonProgress   LessonProgress[]

  // Metadata - Traçabilité Excellence
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([country])
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  color       String? // Hex color pour interface élégante
  icon        String? // Icône ou URL pour visualisation
  order       Int? // Ordre d'affichage optimisé
  isActive    Boolean @default(true)

  // Relations - Taxonomie Intelligente
  programs ProgramCategory[]

  // Metadata - Excellence Temporelle
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([slug])
  @@index([isActive])
}

model Program {
  id          String  @id @default(cuid())
  slug        String  @unique
  title       String
  subtitle    String?
  description String?
  content     String? // Contenu riche optimisé

  // Program Details - Excellence Pédagogique
  price     Float?        @default(0)
  currency  String?       @default("USD")
  duration  Int? // Durée en heures
  level     ProgramLevel? @default(BEGINNER)
  published Boolean       @default(false)

  // Media - Expérience Multimédia
  thumbnail  String?
  videoIntro String?

  // Enrollment - Gestion Capacité
  maxStudents     Int?
  currentStudents Int? @default(0)

  // Author - Attribution Excellence
  authorId String?
  author   User?   @relation(fields: [authorId], references: [id])

  // Relations - Écosystème Pédagogique
  lessons     Lesson[]
  categories  ProgramCategory[]
  caseStudies CaseStudy[]
  enrollments Enrollment[]

  // Metadata - Cycle de Vie Programme
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([slug])
  @@index([published])
  @@index([authorId])
  @@index([level])
}

model Lesson {
  id       String  @id @default(cuid())
  title    String
  content  String?
  summary  String?
  order    Int
  duration Int? // Durée en minutes

  // Media - Apprentissage Multimodal
  videoUrl String?
  audioUrl String?

  // Status - Contrôle Publication
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  // Relations - Structure Pédagogique
  programId String
  program   Program          @relation(fields: [programId], references: [id], onDelete: Cascade)
  progress  LessonProgress[]

  // Metadata - Excellence Temporelle
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([programId, order])
  @@index([programId])
  @@index([isPublished])
}

model ProgramCategory {
  programId  String
  categoryId String
  program    Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([programId, categoryId])
}

model CaseStudy {
  id       String  @id @default(cuid())
  title    String  @unique
  subtitle String?
  content  String?
  summary  String?

  // Categorization - Intelligence Métier
  industry   String?
  company    String?
  tags       String? // Tableau JSON pour tags dynamiques
  difficulty String? // "Easy", "Medium", "Hard"

  // Metrics - Analytique Avancée
  readTime Int? // Temps de lecture estimé (minutes)
  views    Int? @default(0)

  // Relations - Intégration Programme
  programId String
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  // Metadata - Cycle Publication
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([programId])
  @@index([industry])
}

model Enrollment {
  id        String @id @default(cuid())
  userId    String
  programId String

  // Enrollment Details - Parcours Apprenant
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  progress    Float?    @default(0) // Pourcentage progression (0-100)

  // Payment Information - Gestion Financière
  paymentStatus String? // "pending", "paid", "refunded"
  paymentAmount Float?
  paymentDate   DateTime?

  // Relations - Écosystème Apprenant
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  // Metadata - Traçabilité Inscription
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, programId])
  @@index([userId])
  @@index([programId])
  @@index([paymentStatus])
}

model LessonProgress {
  id       String @id @default(cuid())
  userId   String
  lessonId String

  // Progress Tracking - Excellence Mesurable
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  timeSpent   Int? // Temps passé en secondes
  progress    Float?    @default(0) // Pourcentage progression

  // Notes and Feedback - Apprentissage Personnalisé
  notes  String?
  rating Int? // Évaluation 1-5

  // Relations - Parcours Individualisé
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  // Metadata - Suivi Temporel
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@index([isCompleted])
}

model IELTSTestResult {
  id       String @id @default(cuid())
  userId   String
  testType String // "diagnostic", "practice", "mock_exam"

  // Scores - Excellence Mesurée
  listeningScore Float?
  readingScore   Float?
  writingScore   Float?
  speakingScore  Float?
  overallScore   Float?
  targetScore    Float?

  // Test Details - Session Complète
  testDate         DateTime?
  completedAt      DateTime?
  timeSpentMinutes Int?

  // Feedback and Analysis - Intelligence Pédagogique
  feedback        String?
  strengths       String? // Tableau JSON forces
  weaknesses      String? // Tableau JSON faiblesses
  recommendations String? // Tableau JSON recommandations

  // Progress Tracking - Évolution Excellence
  isCompleted   Boolean @default(false)
  attemptNumber Int?    @default(1)

  // Relations - Parcours IELTS Intégré
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Metadata - Historique Performance
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([testType])
  @@index([overallScore])
  @@index([testDate])
  @@index([isCompleted])
}
