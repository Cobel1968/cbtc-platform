generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum ProgramStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  name         String
  role         Role      @default(USER)
  profile      Profile?
  enrollments  Enrollment[]
  createdPrograms Program[] @relation("ProgramInstructor")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isActive     Boolean   @default(true)

  @@map("users")
}

model Profile {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
  title     String?
  bio       String?
  avatarUrl String?
  phone     String?
  website   String?
  linkedin  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Program {
  id          String        @id @default(cuid())
  slug        String        @unique
  title       String
  description String
  shortDescription String?
  imageUrl    String?
  price       Decimal       @default(0)
  currency    String        @default("EUR")
  duration    Int?
  level       String?
  category    String?
  status      ProgramStatus @default(DRAFT)
  instructor  User          @relation("ProgramInstructor", fields: [instructorId], references: [id])
  instructorId String
  lessons     Lesson[]
  enrollments Enrollment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("programs")
}

model Lesson {
  id        String   @id @default(cuid())
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
  title     String
  content   String
  videoUrl  String?
  duration  Int?
  order     Int
  isPublished Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lessons")
}

model Enrollment {
  id              String           @id @default(cuid())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  program         Program          @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId       String
  status          EnrollmentStatus @default(ACTIVE)
  progress        Decimal          @default(0)
  completedAt     DateTime?
  certificateUrl  String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, programId])
  @@map("enrollments")
}
