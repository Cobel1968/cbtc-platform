# CBTC Payment Integration Test Script\n# Wave Money + POS Cash Payment Testing\n# Abel Coulibaly - Excellence Financi√®re\n\nparam(\n    [string]$BackendUrl = \"http://localhost:5000\",\n    [string]$FrontendUrl = \"http://localhost:3000\"\n)\n\nWrite-Host \"üí∞ CBTC Payment Integration Test\" -ForegroundColor Cyan\nWrite-Host \"üì° Backend URL: $BackendUrl\" -ForegroundColor Yellow\nWrite-Host \"üåê Frontend URL: $FrontendUrl\" -ForegroundColor Yellow\nWrite-Host (\"=\" * 60) -ForegroundColor Gray\n\n$TestResults = @{}\n\n# Test 1: Backend Health Check\nWrite-Host \"`nüè• Testing Backend Health...\" -ForegroundColor Cyan\ntry {\n    $response = Invoke-RestMethod -Uri \"$BackendUrl/api/health\" -Method Get -TimeoutSec 10\n    Write-Host \"‚úÖ Backend Health Check: PASSED\" -ForegroundColor Green\n    Write-Host \"   Status: $($response.status)\" -ForegroundColor Gray\n    $TestResults.BackendHealth = $true\n}\ncatch {\n    Write-Host \"‚ùå Backend Health Check: FAILED\" -ForegroundColor Red\n    Write-Host \"   Error: $($_.Exception.Message)\" -ForegroundColor Red\n    $TestResults.BackendHealth = $false\n}\n\n# Test 2: Wave Payment Initiation\nWrite-Host \"`nüì± Testing Wave Payment Initiation...\" -ForegroundColor Cyan\ntry {\n    $wavePayload = @{\n        programId = \"prog-1\"\n        customerPhone = \"+2250123456789\"\n        amount = 25000\n    } | ConvertTo-Json\n    \n    $headers = @{\n        \"Content-Type\" = \"application/json\"\n        \"Authorization\" = \"Bearer demo-token\"\n    }\n    \n    $response = Invoke-RestMethod -Uri \"$BackendUrl/api/payments/wave/initiate\" -Method Post -Body $wavePayload -Headers $headers -TimeoutSec 15\n    \n    if ($response.success) {\n        Write-Host \"‚úÖ Wave Payment Initiation: PASSED\" -ForegroundColor Green\n        Write-Host \"   Transaction ID: $($response.transactionId)\" -ForegroundColor Gray\n        Write-Host \"   Reference: $($response.reference)\" -ForegroundColor Gray\n        Write-Host \"   CBTC Wave Number: +2250555007884\" -ForegroundColor Yellow\n        $TestResults.WavePayment = $true\n        \n        # Display Wave Instructions\n        Write-Host \"`nüìã WAVE PAYMENT INSTRUCTIONS:\" -ForegroundColor Yellow\n        Write-Host $response.instructions -ForegroundColor White\n    } else {\n        Write-Host \"‚ùå Wave Payment Failed: $($response.error)\" -ForegroundColor Red\n        $TestResults.WavePayment = $false\n    }\n}\ncatch {\n    Write-Host \"‚ùå Wave Payment Test: FAILED\" -ForegroundColor Red\n    Write-Host \"   Error: $($_.Exception.Message)\" -ForegroundColor Red\n    $TestResults.WavePayment = $false\n}\n\n# Test 3: POS Cash Payment\nWrite-Host \"`nüíµ Testing POS Cash Payment...\" -ForegroundColor Cyan\ntry {\n    $posPayload = @{\n        programId = \"prog-2\"\n        amount = 15000\n        customerName = \"Test Customer CBTC\"\n        cashierName = \"Abel Coulibaly\"\n        terminalId = \"CBTC-001\"\n        location = \"Abidjan Centre\"\n    } | ConvertTo-Json\n    \n    $headers = @{\n        \"Content-Type\" = \"application/json\"\n        \"Authorization\" = \"Bearer demo-token\"\n    }\n    \n    $response = Invoke-RestMethod -Uri \"$BackendUrl/api/payments/pos/cash\" -Method Post -Body $posPayload -Headers $headers -TimeoutSec 15\n    \n    if ($response.success) {\n        Write-Host \"‚úÖ POS Cash Payment: PASSED\" -ForegroundColor Green\n        Write-Host \"   Receipt Number: $($response.receiptNumber)\" -ForegroundColor Gray\n        Write-Host \"   Invoice Number: $($response.invoiceNumber)\" -ForegroundColor Gray\n        Write-Host \"   Terminal: $($response.terminal.id) - $($response.terminal.location)\" -ForegroundColor Gray\n        Write-Host \"   Cashier: $($response.terminal.cashier)\" -ForegroundColor Gray\n        $TestResults.POSPayment = $true\n    } else {\n        Write-Host \"‚ùå POS Payment Failed: $($response.error)\" -ForegroundColor Red\n        $TestResults.POSPayment = $false\n    }\n}\ncatch {\n    Write-Host \"‚ùå POS Payment Test: FAILED\" -ForegroundColor Red\n    Write-Host \"   Error: $($_.Exception.Message)\" -ForegroundColor Red\n    $TestResults.POSPayment = $false\n}\n\n# Test 4: Payment History\nWrite-Host \"`nüìä Testing Payment History...\" -ForegroundColor Cyan\ntry {\n    $headers = @{\n        \"Authorization\" = \"Bearer demo-token\"\n    }\n    \n    $response = Invoke-RestMethod -Uri \"$BackendUrl/api/payments/user/1\" -Method Get -Headers $headers -TimeoutSec 10\n    \n    if ($response.success) {\n        Write-Host \"‚úÖ Payment History: PASSED\" -ForegroundColor Green\n        Write-Host \"   Payments Found: $($response.payments.Count)\" -ForegroundColor Gray\n        \n        foreach ($payment in $response.payments) {\n            Write-Host \"   - $($payment.program): $($payment.amount) $($payment.currency) [$($payment.method)]\" -ForegroundColor Gray\n        }\n        $TestResults.PaymentHistory = $true\n    } else {\n        Write-Host \"‚ùå Payment History Failed\" -ForegroundColor Red\n        $TestResults.PaymentHistory = $false\n    }\n}\ncatch {\n    Write-Host \"‚ùå Payment History Test: FAILED\" -ForegroundColor Red\n    Write-Host \"   Error: $($_.Exception.Message)\" -ForegroundColor Red\n    $TestResults.PaymentHistory = $false\n}\n\n# Test 5: Frontend Payment Pages\nWrite-Host \"`nüåê Testing Frontend Payment Pages...\" -ForegroundColor Cyan\ntry {\n    # Test checkout page\n    $checkoutResponse = Invoke-WebRequest -Uri \"$FrontendUrl/checkout/prog-1\" -Method Get -TimeoutSec 10\n    \n    if ($checkoutResponse.StatusCode -eq 200) {\n        Write-Host \"‚úÖ Checkout Page: ACCESSIBLE\" -ForegroundColor Green\n        $TestResults.CheckoutPage = $true\n    } else {\n        Write-Host \"‚ùå Checkout Page: FAILED\" -ForegroundColor Red\n        $TestResults.CheckoutPage = $false\n    }\n}\ncatch {\n    Write-Host \"‚ùå Checkout Page Test: FAILED\" -ForegroundColor Red\n    Write-Host \"   Error: $($_.Exception.Message)\" -ForegroundColor Red\n    $TestResults.CheckoutPage = $false\n}\n\n# Test Summary\nWrite-Host \"`n\" (\"=\" * 60) -ForegroundColor Gray\nWrite-Host \"üìã CBTC PAYMENT TEST SUMMARY\" -ForegroundColor Cyan\nWrite-Host (\"=\" * 60) -ForegroundColor Gray\n\n$PassedTests = 0\n$TotalTests = $TestResults.Count\n\nforeach ($test in $TestResults.GetEnumerator()) {\n    $status = if ($test.Value) { \"‚úÖ PASSED\" } else { \"‚ùå FAILED\" }\n    $color = if ($test.Value) { \"Green\" } else { \"Red\" }\n    \n    Write-Host \"$($test.Key.PadRight(20)): $status\" -ForegroundColor $color\n    \n    if ($test.Value) { $PassedTests++ }\n}\n\nWrite-Host \"`nüìä R√âSULTATS FINAUX:\" -ForegroundColor Cyan\nWrite-Host \"   Tests R√©ussis: $PassedTests/$TotalTests\" -ForegroundColor $(if ($PassedTests -eq $TotalTests) { \"Green\" } else { \"Yellow\" })\n\nif ($PassedTests -eq $TotalTests) {\n    Write-Host \"`nüéâ TOUS LES TESTS PAYMENT CBTC R√âUSSIS!\" -ForegroundColor Green\n    Write-Host \"üí≥ Syst√®me de paiement pr√™t pour production\" -ForegroundColor Green\n    Write-Host \"üì± Wave Money: +2250555007884\" -ForegroundColor Blue\n    Write-Host \"üíµ POS Cash: Terminaux CBTC actifs\" -ForegroundColor Blue\n} else {\n    Write-Host \"`n‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â\" -ForegroundColor Yellow\n    Write-Host \"üîß V√©rifiez les services backend/frontend\" -ForegroundColor Yellow\n}\n\nWrite-Host \"`nüìû Support CBTC: +2250555007884 | abel@cobelbtc.com\" -ForegroundColor Cyan\nWrite-Host (\"=\" * 60) -ForegroundColor Gray
